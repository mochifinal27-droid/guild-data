# =================================================================
# โค้ดสำหรับ Replit (รัน 24/7) - Select Menu สำหรับเลือกอาชีพที่กำหนด
# =================================================================

import discord
from discord import app_commands
from discord.ui import Button, Modal, TextInput, View
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import json
import os
from threading import Thread
from flask import Flask

# 1. การตั้งค่าตัวแปรและการเชื่อมต่อ Google Sheets 
# ดึงข้อมูลทั้งหมดจาก Replit Secrets
BOT_TOKEN = os.environ.get("BOT_TOKEN") 
GUILD_ID = 1422980759433777194 
SHEET_NAME = 'guild roster data' 
WORKSHEET_NAME = 'guild roster' 

# โหลด JSON Service Account จาก Replit Secrets
try:
    service_account_json_string = os.environ.get("GOOGLE_SERVICE_ACCOUNT_JSON")
    if not service_account_json_string:
        raise ValueError("GOOGLE_SERVICE_ACCOUNT_JSON Secret ไม่ได้ถูกตั้งค่า")
    service_account_info = json.loads(service_account_json_string)

except ValueError as e:
    print(f"❌ FATAL ERROR: การโหลด Google Service Account ล้มเหลว: {e}")
    exit()
except Exception as e:
    print(f"❌ FATAL ERROR: เกิดข้อผิดพลาดอื่นในการโหลด JSON: {e}")
    exit()

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_dict(service_account_info, scope)

# เชื่อมต่อกับ Google Sheets
try:
    client_gspread = gspread.authorize(creds)
    sheet = client_gspread.open(SHEET_NAME).worksheet(WORKSHEET_NAME) 
    print(f"✅ เชื่อมต่อ Google Sheet '{SHEET_NAME}' และ Worksheet '{WORKSHEET_NAME}' สำเร็จ")
except Exception as e:
    print(f"❌ FATAL ERROR: เกิดข้อผิดพลาดในการเชื่อมต่อ Google Sheets: {e}")
    exit()

# =================================================================
# 2. Modal และ Select Menu (ส่วนประกอบ UI)
# =================================================================

# --- Modal: สำหรับกรอกข้อมูลที่เหลือ (ไม่มี Role) ---
class RegisterDataModal(Modal, title='ลงทะเบียน - ขั้นตอน 2: กรอกข้อมูล'):
    def __init__(self, selected_role: str):
        super().__init__(timeout=None)
        self.selected_role = selected_role 

    in_game_name = TextInput(
        label='ชื่อในเกม (In-game Name)',
        placeholder='ป้อนชื่อตัวละครในเกม...',
        max_length=50,
        required=True,
        style=discord.TextStyle.short
    )
    discord_id_input = TextInput(
        label='Discord ID',
        placeholder='ป้อน Discord ID (ตัวอย่าง: your_name#1234)',
        max_length=50,
        required=False,
        style=discord.TextStyle.short
    )
    level = TextInput(
        label='ระดับ (Level)',
        placeholder='ป้อนระดับตัวละครของคุณ...',
        max_length=10,
        required=True,
        style=discord.TextStyle.short
    )
    note = TextInput(
        label='หมายเหตุ (ถ้ามี)',
        placeholder='ข้อมูลเพิ่มเติมเกี่ยวกับผู้เล่น...',
        max_length=200,
        required=False,
        style=discord.TextStyle.long
    )

    async def on_submit(self, interaction: discord.Interaction):
        data_row = [
            interaction.user.display_name, 
            str(interaction.user.id),       
            self.discord_id_input.value,   
            self.in_game_name.value,       
            self.selected_role,            # ใช้ Role ที่เลือกจาก Select Menu
            self.level.value,              
            self.note.value,               
        ]

        try:
            sheet.append_row(data_row)
            await interaction.response.send_message(
                f'✅ **ลงทะเบียนสำเร็จ!**\n'
                f'อาชีพ: **{self.selected_role}**\n'
                f'ข้อมูลถูกบันทึกใน Google Sheet แล้ว',
                ephemeral=True
            )
        except Exception as e:
            await interaction.response.send_message(
                f'❌ **เกิดข้อผิดพลาดในการบันทึกข้อมูล!** กรุณาแจ้งผู้ดูแล ({e})',
                ephemeral=True
            )

# --- Select Menu: สำหรับเลือก Role (มีเฉพาะอาชีพตามรูปภาพ) ---
class RoleSelect(discord.ui.Select):
    def __init__(self):
        options = [
            # ‼️ อาชีพเฉพาะที่กำหนดเท่านั้น ‼️
            discord.SelectOption(label="สุ่ยเมิง-nightwaker", description="อาชีพ สุ่ยเมิง", value="สุ่ยเมิง-nightwaker"),
            discord.SelectOption(label="เสี้ยยี่-ironclad", description="อาชีพ เสี้ยยี่", value="เสี้ยยี่-ironclad"),
            discord.SelectOption(label="ซื่อเหอ-bloodstorm", description="อาชีพ ซื่อเหอ", value="ซื่อเหอ-bloodstorm"),
            discord.SelectOption(label="ชู่วเวิ่น-celestune", description="อาชีพ ชู่วเวิ่น", value="ชู่วเวิ่น-celestune"),
            discord.SelectOption(label="เส้นเซียง-sylph", description="อาชีพ เส้นเซียง", value="เส้นเซียง-sylph"),
            discord.SelectOption(label="จี๋วลีง-numina", description="อาชีพ จี๋วลีง", value="จี๋วลีง-numina"),
        ]
        super().__init__(placeholder="เลือกอาชีพหลักของคุณ...", options=options, custom_id="role_select_menu")

    async def callback(self, interaction: discord.Interaction):
        selected_role = self.values[0]
        # เปิด Modal (ขั้นตอน 2) พร้อมส่ง Role ที่เลือกไป
        await interaction.response.send_modal(RegisterDataModal(selected_role))

# =================================================================
# 3. View หลัก (ปุ่มและ Select Menu)
# =================================================================

class RegisterView(View):
    def __init__(self):
        super().__init__(timeout=None) 
        # Select Menu อยู่ใน Row 0 (แถวบนสุด)
        self.add_item(RoleSelect())

    # ปุ่มเหล่านี้อยู่ใน Row 1 (แถวถัดไป)

    # ปุ่ม: ดูรายชื่อผู้เล่น (ส่งข้อความชั่วคราว)
    @discord.ui.button(label="ดูรายชื่อผู้เล่น", style=discord.ButtonStyle.secondary, custom_id="view_roster", row=1)
    async def view_roster_callback(self, interaction: discord.Interaction, button: Button):
        await interaction.response.send_message(
            "⏳ ฟังก์ชันนี้ต้องใช้โค้ดสำหรับดึงข้อมูลรายชื่อจาก Google Sheets...", 
            ephemeral=True
        )

    # ปุ่ม: อัปเดตข้อมูล
    @discord.ui.button(label="อัปเดตข้อมูล", style=discord.ButtonStyle.success, custom_id="update_data", row=1)
    async def update_data_callback(self, interaction: discord.Interaction, button: Button):
        await interaction.response.send_message("❌ ฟังก์ชันอัปเดตข้อมูลยังไม่พร้อมใช้งาน", ephemeral=True)

    # ปุ่ม: ลบผู้เล่น
    @discord.ui.button(label="ลบผู้เล่น", style=discord.ButtonStyle.danger, custom_id="delete_player", row=1)
    async def delete_player_callback(self, interaction: discord.Interaction, button: Button):
        await interaction.response.send_message("❌ ฟังก์ชันลบผู้เล่นยังไม่พร้อมใช้งาน", ephemeral=True)


# =================================================================
# 4. การตั้งค่าบอทและคำสั่ง
# =================================================================

class MyClient(discord.Client):
    def __init__(self, *, intents: discord.Intents):
        super().__init__(intents=intents)
        self.tree = app_commands.CommandTree(self)
        self.register_modal_command = None

    async def on_ready(self):
        await self.wait_until_ready()
        
        # เพิ่มคำสั่ง /สมัคร เพื่อแจ้งเตือนให้ใช้ Select Menu
        if not self.register_modal_command:
            @app_commands.command(name="สมัคร", description="เปิดฟอร์มลงทะเบียน (ต้องเลือกอาชีพก่อนใช้)")
            async def register_modal_command_func(interaction: discord.Interaction):
                await interaction.response.send_message(
                    "กรุณาใช้ **Select Menu** ในโพสต์หลักเพื่อเลือกอาชีพก่อนสมัคร",
                    ephemeral=True
                )
            self.register_modal_command = register_modal_command_func
            self.tree.add_command(self.register_modal_command)
        
        try:
            await self.tree.sync()
            print("✅ Slash Command ซิงค์สำเร็จ (Global)")
        except Exception as e:
             print(f"⚠️ ข้อผิดพลาดในการซิงค์คำสั่ง: {e}")
        
        self.add_view(RegisterView()) 
        
        print(f'🤖 Logged in as {self.user} (ID: {self.user.id})')
        print('🎉 บอทพร้อมใช้งานแล้ว! (Bot is Ready!)')

    @app_commands.command(name="mytest", description="ทดสอบการทำงานของ Slash Command")
    async def test_command(self, interaction: discord.Interaction):
        await interaction.response.send_message("✅ บอททำงานและรับคำสั่งได้แล้ว!", ephemeral=True)
        
    @app_commands.command(name="postbutton", description="โพสต์ปุ่มและตัวเลือกการลงทะเบียน")
    @app_commands.default_permissions(manage_guild=True) 
    async def post_register_button_command(self, interaction: discord.Interaction):
        await interaction.response.send_message(
            "👇 **ขั้นตอนที่ 1: เลือกอาชีพหลักของคุณ** 👇", 
            view=RegisterView()
        )

# =================================================================
# 5. ฟังก์ชันสำหรับรัน 24/7 บน Replit
# =================================================================
app = Flask(__name__)

@app.route('/')
def home():
    return "Discord Bot is running and connected to Google Sheets!"

def run_server():
    app.run(host='0.0.0.0', port=8080) 

def start_bot():
    intents = discord.Intents.default()
    intents.message_content = True
    intents.members = True 
    intents.presences = True 
    client = MyClient(intents=intents)
    try:
        if not BOT_TOKEN:
             raise discord.LoginFailure("BOT_TOKEN is missing from Replit Secrets.")
             
        client.run(BOT_TOKEN)
    except discord.LoginFailure:
        print("❌ FATAL ERROR: Token ไม่ถูกต้อง! กรุณาตรวจสอบ BOT_TOKEN ใน Replit Secrets")
    except Exception as e:
        print(f"❌ FATAL ERROR: เกิดข้อผิดพลาดขณะรันบอท: {e}")

if __name__ == '__main__':
    # เริ่ม Web Server ก่อน
    t = Thread(target=run_server)
    t.start()
    
    # แล้วเริ่มรัน Discord Bot
    start_bot()
